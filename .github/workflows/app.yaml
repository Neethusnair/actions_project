name: Deploy app to GKE

on:
  push:
    branches:
    - main

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: new-gke
  GKE_ZONE: us-central1-a

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker
    # Get the GKE credentials so we can deploy to the cluster
    - run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
       
    # Login to Jfrog
    - name: Jfrog login
      env:
        JFROG_USER: ${{ secrets.JFROG_USER }}
        JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
      run: |
          docker login sreyo.jfrog.io -u $JFROG_USER -p $JFROG_PASSWORD
          #kubectl create secret generic jfrog-secret --from-file=.dockerconfigjson=.docker/config.json  --type=kubernetes.io/dockerconfigjson
          kubectl create secret generic jfrog-secret --from-file=.dockerconfigjson=/home/runner/.docker/config.json  --type=kubernetes.io/dockerconfigjson
    

    
    # Set up istio
    #- name: Set up Istio
     # run: |-
       #curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.9.0 sh -
       #cd istio-1.9.0
       #export PATH=$PWD/bin:$PATH
       #istioctl install --set profile=demo -auto-approve
       #cd ~
       #kubectl label namespace default istio-injection=enabled
       
    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
   
   # Deploy mongo to the GKE cluster
    - name: Deploy Mongo
      run: |-
        #./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        #kubectl create secret docker-registry gcr-access-token  --docker-server=gcr.io  --docker-username=oauth3accesstoken --docker-password="$(gcloud auth print-access-token)" --docker-email=first-732@exemplary-city-303104.iam.gserviceaccount.com
        #kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "gcr-access-token"}]}'
        #kubectl create secret generic jfrog-secret --from-file=.dockerconfigjson=/home/runner/.docker/config.json  --type=kubernetes.io/dockerconfigjson
        ./kustomize build . | kubectl apply -f -
        #kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl wait --for=condition=ready pod -l app=mongodb
        kubectl rollout status deployment mongodb-deployment
        kubectl get services -o wide
        
    # Deploy docorized app image to the GKE cluster
    - name: Deploy Login 
      run: |-
        kubectl apply -f app-config.yaml 
        kubectl apply -f app.yaml
        kubectl wait --timeout=90s --for=condition=ready pod -l app=login
        kubectl rollout status deployment login-deployment
        kubectl get services -o wide
   
   #deploy welcome image    
    - name: Deploy List
      run: |-
        kubectl apply -f welcome.yaml
        kubectl wait --timeout=90s --for=condition=ready pod -l app=list
        kubectl rollout status deployment list-deployment
        kubectl get services -o wide 
        
   #deploy gateway and virtual services
    - name: Deploy gateway
      run: |-
        kubectl apply -f gateway.yaml
        kubectl get svc -l=istio=ingressgateway -n istio-system
        kubectl apply -f gateway.yaml
        kubectl apply -f vs-login.yaml
        kubectl apply -f vs-list.yaml
        
  #deploy ingress    
    #- name: Deploy Ingress 
      #run: |-
        #kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.45.0/deploy/static/provider/cloud/deploy.yaml
        #kubectl wait --namespace ingress-nginx \
           #--for=condition=ready pod \
           #--selector=app.kubernetes.io/component=controller \
           #--timeout=90s
        #kubectl apply -f my-ingress.yaml
        ##kubectl get ingress    
        #kubectl get svc ingress-nginx-controller -n ingress-nginx
        
        
